Problems:
1 - Delete default data
2 - Price doesn't accept decimals (2 digits)
4 - Expense date should follow order/delivery date
5 - Expense form missing shipping and order flags
6 - Support Peinture missing missing in sell orders form
7 - Remove patte 45
8 - Sync Invetory/Expenses after order state finished, to be in a separate modal
9 - Introduce code-envoi for shipping from delivery companies

Improvements:
1 - Introduce size table
    ```
        model Size {
            id        Int     @id @default(autoincrement())
            name      String
            productVariation   ProductVariation[]
        }

        model ProductVariation {
            id        Int @id @default(autoincrement())
            productId Int
            colorId   Int
            sizeId    Int
            name      String
            quantity  Int
            threshold Int

            product   Product @relation(fields: [productId], references: [id])
            color     Color   @relation(fields: [colorId], references: [id])
            size      Size   @relation(fields: [sizeId], references: [id])

            orderLineProductVariations OrderLineProductVariation[]
        }
    ```

2 - Introduce product categories
    ```
        model ProductCategory {
            id            Int     @id @default(autoincrement())
            name          String
            productType   ProductType[]
        }
        model ProductType {
            id            Int     @id @default(autoincrement())
            name          String
            isPrintable   Boolean
            isPaint       Boolean
            isTool        Boolean
            productCategoryId Int

            category  ProductCategory    @relation(fields: [productCategoryId], references: [id])
            product   Product[]
        }
    ```

3 - Move all flags from ProductType to Product
    ```
        model Product {
            id            Int            @id @default(autoincrement())
            name          String

            isLayer       Boolean
            isPaint       Boolean
            isSellable    Boolean
            isPrintable   Boolean
            isPaintTool   Boolean
            isPrintTool   Boolean

            productTypeId Int

            productType       ProductType    @relation(fields: [productTypeId], references: [id])
            productVariation  ProductVariation[]
        }
    ```

4 - Adjust OrderLine to contain  sellable product related fields (`productVariationId`, `quantity`, `unitPrice`)
    and keep `OrderLineProductVariation` only for consumable products, and rename `OrderLineProductVariation` to `OrderLineConsumedVariation`
    ```
        model OrderLine {
            id                  Int      @id @default(autoincrement())
            orderId             Int
            designId            Int?
            productVariationId  Int
            quantity            Int
            unitPrice           Decimal @db.Decimal(10, 2) @default(0.00)

            order               Order   @relation(fields: [orderId], references: [id])
            productVariation    ProductVariation @relation(fields: [productVariationId], references: [id])
            design              CompanyDesign? @relation(fields: [designId], references: [id])

            consumedVariations OrderLineProductVariation[]
        }

        model OrderLineProductVariation {
            orderLineId        Int
            productVariationId Int
            quantity           Int

            orderLine OrderLine @relation(fields: [orderLineId], references: [id])
            productVariation ProductVariation @relation(fields: [productVariationId], references: [id])

            @@id([orderLineId, productVariationId])
        }
    ```

5 - Ability to track the status history
    5.1 - Create a new `OrderStatusHistory` model
        ```
            model OrderStatusHistory {
                id         Int      @id @default(autoincrement())
                orderId    Int
                fromStatus Int
                toStatus   Int
                changedAt  DateTime @default(now())
                changedBy  String?

                order      Order    @relation(fields: [orderId], references: [id])

                @@index([orderId])
            }
        ```
    5.2 - Adjust `Order` model to consider the `OrderStatusHistory`
        ```
            model Order {
                id          Int              @id @default(autoincrement())
                companyId   Int
                orderType   OrderType
                orderStatus Int              // Still using OrderStatusEnum values
                totalPrice  Decimal          @db.Decimal(10, 2) @default(0.00)
                date        DateTime

                company     Company?         @relation(fields: [companyId], references: [id])
                orderLine   OrderLine[]
                shipping    Shipping?
                statusHistory OrderStatusHistory[]
            }
        ```

6 - Migrate `PaintType` enum to model for more flexibility (This will help with point 3)
    ```
        model PaintType {
          id    Int     @id @default(autoincrement())
          name  String  @unique
          code  String  @unique // Optional short code like 'PVC', 'EAU'

          orderLines OrderLine[]
        }
    ```

7 - Split `Product` model to `PrintSupport`, `Tools`, and `Paint`
    7.1 - `PrintSupport` (Sac, Mug, Papier Cartone, ...)
    7.2 - `Tools` (Cadre, Raclete, ...)
    7.3 - `Paint` (PVC, EAU, TONNER, ...)

8 - Add support for PrintType (serigraphie, numeric, DTF, ...) in orders

9 - Include customer designs in an inner table of the customers, and remove design menu

10- client dashboard
    - number of orders
    - chiffre d'affaire
    - number of bags
    - ...